0608
    品牌的增删改查
        a.品牌表有一个logo字段需要上传图片使用uploadify插件;此插件与传统的插件相比优势是：上传成功后回显图片
        b.考虑到自己的服务器带宽较低我们将图片上传到七牛云上面(免费);composer安装七牛云 "crazyfd/yii2-qiniu": "dev-master",
        c.考虑到商城的数据恢复问题这里的删除都是逻辑删除





0609
    1.文章分类的增删改查
        文章表使用垂直分表,分两张表保存,文章表(article)和文章分类表(article_category),文章表的增删改查(多模型同时输入)
        相当于就是使用了一个一对一的关系






0611
    1.商品分类增删改查
       a.商城的分类一般是无限分类，因为层级较多所以补适合使用递归来做这里我们使用嵌套集合来保存分类数据，嵌套集合的话在设计表的时候就要设计就要多设置一些功能字段;composer安装嵌套集合插件 "creocoder/yii2-nested-sets": "^0.9.0",
       b.在商展示分类的时候使用前端插件ztree来展示
       c.商品分类列表的折叠使用js技术完成

0612
    1.商品表的增删改查
        a.添加商品用了uploadify,ztree前端插件,ueEditor插件
        b.商品编号的的生成是基于goods_day_count表的,每添加一次的时候将词表的count值+1用于记录每天创建的商品数。注意补0的时候用到sprintf函数
        c.商品列表搜索即搜索就是模糊查询,在列表页创建一个搜索表单。关键点：一定要指定method和action参数
        d.商品添加的时候用了垂直分表技术，将商品详情抽出来放在另外一个详情表中此表只有两个字段商品id和详情
    2.商品相册图片的添加、删除、和列表展示
        a.此功能用了一个多文件上传插件FileInput，在github上面搜索此插件，然后按照文档操作，此插件使用composer安装，安装命令：composer require kartik-v/yii2-widget-fileinput "@dev" -vvv
        b.安装完成先测试能用 再用到项目中；因为上传多图 所以有一个重要的参数必须设置'options' => ['multiple' => true],后面的参数根据文档设置即可
        c.还有就是文档异步上传图片地址入库问题，我是调用的yii2中自带的文件上传接口来上传图片的UploadedFile::getInstance();
        d.此插件也支持异步删除





0614
    管理员的增删改查、登录功能和注销功能
    管理员的增加：注意明文密码和密文密码要分开保存，好处只将密文密码入库

    登录功能是在表单模型中做的
    创建一个表单模型LoginForm的model继承Model
    在模型中除了已有的验证方法，还需要自己定义一个验证方法来验证用户名和密码是否正确，因为数据库里设计的是用户名是唯一值所以，先查询用户名是否存在 在根据用户名查询此条数据。在比对密码是否正确，数据库的密码是加密的儿用户输入的密码不是加密的，这里Yii中有一个方法来比对\Yii::$app->security->validatePassword(输入的密码(无加密),数据库密码(加密));
    基于cookie的自动登录没有思路！百度了也没看懂！等老师讲~




0615
    基于cookie的自动登录;
    自动登录：就是当用户选择了记住我以后 用户在关闭浏览器后下一次打开浏览器访问页面时候还是登录状态
    自动登录三步走：
        第一步：在user组件中添加这个参数'enableAutoLogin' => true,
        第二步：在模型中
                    public function getAuthKey()
                    {
                        return $this->auth_key;
                    }
        第三步：在模型中比对auth_key
                public function validateAuthKey($authKey)
                    {
                        return $this->auth_key == $authKey;
                    }





0616
    使用RBAC管理用户和权限
        a.在common->config->main->components配置'authManager'=>['class'=>\yii\rbac\DbManager::className(),]参数
        b.yii中跟我们建立好了4张权限表 命令：yii migrate --migrationPath=@yii/rbac/migrations
    权限增删改查
       authManager里面有各自的函数
       添加：authManager->createPermission()
       修改：$authManager->update($name,$permission)
       获取所有权限：authManager->getPermissions()
       删除：$authManger->remove($permission)
    角色增删改查
        添加：$authManger->createRole()
        修改：$authManger->update($name,$role)
        删除：$authManger->remove($role)
        查询：authManager->getRoles()
    角色和权限关联
        注意修改的时候要先清除所有的权限再重新循环添加选中的权限
        //清空权限
        $authManger->removeChildren($role);
    用户和角色关联




0618
    菜单的增删改查
        a.菜单我们是要到了组件widgets 组件 显示关联的菜单 使用到了过滤器 配合rbac来使用
        b.定义一个过滤器XxxFilter extents ActionFilter  实现beforeAction的操作
        c.在什么什么之前执行这个过滤器  \Yii::$app->user->can(xx->uniqueId)判断当前路由该用户有没权限如果没有抛出异常 throw new  HttpException(403,'你没有权限访问该页面');
        d.为了用户体验 在判断是否是游客，User组件里面\Yii::$app->user->isGuest 就可以判断是否是游客登录 因为过滤器没有controller的redirect操作 所有我们先找当前对象的controller再找redirect,我们还需要在控制器中写一个行为 该行为使用到这条过滤器 public function beheavies,使用到这个过滤器 就可以阻止没有权限的用户操作该操作




到此后台就已经圆满结束啦 明天开始迎来我们的前台时代 T_T......
总的来说自己的情况感觉就是学一点忘一点的比如有时候老师写到js的时候感觉完全懵逼 还是下来练习的的时间太少了。没有复习与巩固，代码量太少 。加油加油咯 最后一个月！！！！！！！！！
后台重难点
后台主要有 商品模块,商品分类模块，文章模块，文章分类模块，菜单模块，用户模块，品牌模块，Rbac权限管理模块；
重点就是商品模块的商品分类这一块运用了嵌套集合。。。。。。巴拉巴拉
还有就是rbac权限管理也是一个重点，用过滤器过滤权限





前台：
0619
    会员的注册和登录
        a.阿里大于发短信
            用户模块我们做了登录和注册  使用了手机号唯一验证的方法 所以我们使用了阿里大于的插件
            http://www.alidayu.com/
            "flc/alidayu": "^2.0" 阿里大于的插件
        b.发送邮件

0621
    商品首页模块
        a.商品首页展示分类，将数据库里面的商品分类读取出来显示在页面上，因为当访问量过多的时候每个用户访问都会去查询数据库给数据库造成压力 所以这里我们可以将数据存在redis中每次用户从redis中读取出来就不会给数据库造成压力

    商品列表模块
        a.用户点击商品分类就跳转到商品列表页面商品列表页展示所有的商品，
    商品详情页模块
        a.将商品相册查询出来，然后将商品相册根据前台页面的样式展示出来再将商品查出来分配到页面上





0622
    购物车设计
        分三种情况。
        第一种：未登录情况
            用户在未登录的情况下也可以将商品加入购物车，这种情况我们将商品信息放入cookie中 如果用户加入的是相同的商品则在原来的基础上数量进行累加即可。如果用户加入的是不同的商品则新加入到cookie中一条记录;我们将商品id作为键名将商品数量作为键值 通过商品id去查找商品详情；
        第二种：登录的情况
            用户在登录的情况下直接操作购物车这个数据表即可，对购物车数据表进行增删改查就好了
        第三种：登录的情况下将用户未登录时候加入购物车的商品同步到购物车
            这里主要要在登录的时候将数据同步到购物车 所以这个方法必须写在登录成功之后。用户登录成功之后将缓存中的购物车信息加入到购物车数据表 如果已有这个商品就将ookie中的数量累加到购物车数据表中。如果没有这个商品,就添加这个商品到数据表。执行完成后要清除缓存避免下一次登录时候重复添加




0623
    订单
    流程：
       提交的时候开启事务 ：将订单中的商品保存到订单商品表 如果商品库存不足或商品不粗壮你在抛出异常捕获异常事务回滚。如果足够执行后续流程，执行成功清除购物车，注意由于有时候用户下单以后很长时间都未付款这里我们要写一个php脚本来监听用户是否在一小时内付款，如果超出一小时未付款则取消订单；



php脚本
MAX_EXECUTION_TIME=30php脚本执行的最大时间；
首先创建一个控制台类 再console->cotroller->taskController 继承console的controller





//短信验证码（防止短信被刷）
1.方案一：限制发送频率 ==== 阿里大于已经限制了频率1分钟一条（其他运营商可能没做）
2.方案二：输验证码以后才能发短信
3.方案三：通过ip+cookie来做（验证次数）
防止网络不好，未收到短信/短时间内收到多条验证码
1.方案一：给短信做一个编号，在前台页面上（让用户输入编号为某某某的短信）
1.方案二：短时间内请求的话发送同一个验证码


























